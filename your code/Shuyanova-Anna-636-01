{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Клиническая задача**\n",
        "\n",
        "\"Разработка предиктивной модели успеха вспомогательных репродуктивных технологий (ВРТ) на основе клинико-анамнестических данных пациентов\"\n",
        "\n",
        "Этап 1: Первичный анализ\n",
        "\n",
        "Этап 2: Расширение признакового пространства\n",
        "\n",
        "Этап 3: Предобработка данных\n",
        "\n",
        "Этап 4: Построение моделей\n",
        "\n",
        "Этап 5: Клиническая валидация"
      ],
      "metadata": {
        "id": "K5qtAe2SKfja"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Гипотеза:**\n",
        "**Наступление беременности после процедур ВРТ (вспомогательных репродуктивных технологий) зависит от возраста женщины и возраста её партнёра.**"
      ],
      "metadata": {
        "id": "YNzZCpVeEoCO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Обоснование:**\n",
        "Возраст женщины — один из ключевых факторов фертильности. С возрастом снижается овариальный резерв, ухудшается качество ооцитов, что может влиять на успех ЭКО/ИКСИ.\n",
        "\n",
        "Возраст мужчины также может влиять на фертильность пары — с возрастом может снижаться качество спермы, что отражается в параметрах спермограммы и влияет на успех оплодотворения."
      ],
      "metadata": {
        "id": "iRu1SzvvE0oa"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Q4f1DhKZK-7X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Подготовка данных**"
      ],
      "metadata": {
        "id": "PEWwc2FeFid5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "# Загрузка и очистка данных\n",
        "df = pd.read_csv('датасет - Лист2 (1).csv')\n",
        "\n",
        "# Выбор ключевых признаков для гипотезы\n",
        "features = ['возраст', 'Супруг, возраст', 'беременность (1-наступила, 0-нет)']\n",
        "\n",
        "# Очистка и преобразование данных\n",
        "df_clean = df[features].copy()\n",
        "df_clean = df_clean.replace('-', np.nan)\n",
        "df_clean = df_clean.replace('', np.nan)\n",
        "df_clean = df_clean.apply(pd.to_numeric, errors='coerce')"
      ],
      "metadata": {
        "id": "fCN6FA_0ErbV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Распределение целевой переменной:\")\n",
        "print(df_clean['беременность (1-наступила, 0-нет)'].value_counts())\n",
        "\n",
        "print(\"\\nПропущенные значения:\")\n",
        "print(df_clean.isnull().sum())\n",
        "\n",
        "print(\"\\nСтатистика по возрасту:\")\n",
        "print(df_clean[['возраст', 'Супруг, возраст']].describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qJE8Dk5oHZSR",
        "outputId": "6b95202b-dd54-46e6-a409-69351f8d90f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Распределение целевой переменной:\n",
            "беременность (1-наступила, 0-нет)\n",
            "1.0    38\n",
            "0.0    15\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Пропущенные значения:\n",
            "возраст                                2\n",
            "Супруг, возраст                       11\n",
            "беременность (1-наступила, 0-нет)    178\n",
            "dtype: int64\n",
            "\n",
            "Статистика по возрасту:\n",
            "          возраст  Супруг, возраст\n",
            "count  229.000000       220.000000\n",
            "mean    31.331878        34.677273\n",
            "std      4.231657         5.940376\n",
            "min     22.000000        24.000000\n",
            "25%     29.000000        30.000000\n",
            "50%     31.000000        34.000000\n",
            "75%     34.000000        37.250000\n",
            "max     49.000000        55.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Удаление строк с пропусками в целевой переменной\n",
        "df_clean = df_clean.dropna(subset=['беременность (1-наступила, 0-нет)'])\n",
        "\n",
        "# Более аккуратная обработка пропусков в признаках\n",
        "from sklearn.impute import KNNImputer\n",
        "imputer = KNNImputer(n_neighbors=5)\n",
        "X = imputer.fit_transform(df_clean[['возраст', 'Супруг, возраст']])"
      ],
      "metadata": {
        "id": "1GNg611jHd4r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# анализ данных\n",
        "print(f\"Всего строк: {len(df)}\")\n",
        "print(f\"Целевая переменная:\\n{df['беременность (1-наступила, 0-нет)'].value_counts(dropna=False)}\")\n",
        "print(f\"Пропуски в возрасте женщины: {df['возраст'].isnull().sum()}\")\n",
        "print(f\"Пропуски в возрасте мужчины: {df['Супруг, возраст'].isnull().sum()}\")\n",
        "\n",
        "# Проверим несколько строк\n",
        "print(\"\\nПервые 5 строк:\")\n",
        "print(df[['возраст', 'Супруг, возраст', 'беременность (1-наступила, 0-нет)']].head(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1BrxAQqbIFZb",
        "outputId": "6f4b1d03-44fb-4bf7-8cdb-d7a24c43c18f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Всего строк: 231\n",
            "Целевая переменная:\n",
            "беременность (1-наступила, 0-нет)\n",
            "NaN    173\n",
            "1       38\n",
            "0       15\n",
            "-        5\n",
            "Name: count, dtype: int64\n",
            "Пропуски в возрасте женщины: 2\n",
            "Пропуски в возрасте мужчины: 2\n",
            "\n",
            "Первые 5 строк:\n",
            "   возраст Супруг, возраст беременность (1-наступила, 0-нет)\n",
            "0     29.0              25                                 1\n",
            "1     33.0              39                                 0\n",
            "2     31.0              37                                 1\n",
            "3     32.0              36                                 1\n",
            "4     33.0              34                                 0\n",
            "5     41.0              40                                 0\n",
            "6     31.0               -                                 1\n",
            "7     32.0              36                                 1\n",
            "8     27.0              36                                 1\n",
            "9     41.0              55                                 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Создание модели**"
      ],
      "metadata": {
        "id": "Iphqx8vpF60z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "# 1. ОЧИСТКА ДАННЫХ\n",
        "features_df = df[['возраст', 'Супруг, возраст', 'беременность (1-наступила, 0-нет)']].copy()\n",
        "\n",
        "# Замена нечисловых значений и преобразование\n",
        "features_df = features_df.replace(['-', '', ' ', 'NaN', 'nan'], np.nan)\n",
        "features_df = features_df.apply(pd.to_numeric, errors='coerce')\n",
        "\n",
        "# Удаление строк где целевая переменная NaN\n",
        "features_df = features_df.dropna(subset=['беременность (1-наступила, 0-нет)'])\n",
        "\n",
        "print(f\"Осталось строк после очистки: {len(features_df)}\")\n",
        "\n",
        "# 2. РАЗДЕЛЕНИЕ ДАННЫХ\n",
        "X = features_df[['возраст', 'Супруг, возраст']].values\n",
        "y = features_df['беременность (1-наступила, 0-нет)'].values\n",
        "\n",
        "# Заполнение пропусков МЕДИАНАМИ\n",
        "imputer = SimpleImputer(strategy='median')\n",
        "X = imputer.fit_transform(X)\n",
        "\n",
        "# МАСШТАБИРОВАНИЕ\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(X)\n",
        "\n",
        "# Разделение на train/test\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42, stratify=y\n",
        ")\n",
        "\n",
        "print(f\"Размеры: X_train {X_train.shape}, y_train {y_train.shape}\")\n",
        "\n",
        "# 3. ПРОСТАЯ И СТАБИЛЬНАЯ МОДЕЛЬ\n",
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(8, activation='relu', input_shape=(2,)),\n",
        "    tf.keras.layers.Dropout(0.2),\n",
        "    tf.keras.layers.Dense(4, activation='relu'),\n",
        "    tf.keras.layers.Dense(1, activation='sigmoid')\n",
        "])\n",
        "\n",
        "# КОНСЕРВАТИВНЫЕ НАСТРОЙКИ\n",
        "model.compile(\n",
        "    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n",
        "    loss='binary_crossentropy',\n",
        "    metrics=['accuracy']\n",
        ")\n",
        "\n",
        "# 4. ОБУЧЕНИЕ С РАННЕЙ ОСТАНОВКОЙ\n",
        "early_stop = tf.keras.callbacks.EarlyStopping(\n",
        "    monitor='val_loss', patience=10, restore_best_weights=True\n",
        ")\n",
        "\n",
        "print(\"=== ЗАПУСК ОБУЧЕНИЯ ===\")\n",
        "history = model.fit(\n",
        "    X_train, y_train,\n",
        "    epochs=50,\n",
        "    batch_size=8,\n",
        "    validation_split=0.2,\n",
        "    callbacks=[early_stop],\n",
        "    verbose=1\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sjTuqPmyIRXT",
        "outputId": "fb430ff4-f102-4314-9715-97164c1ebc6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Осталось строк после очистки: 53\n",
            "Размеры: X_train (42, 2), y_train (42,)\n",
            "=== ЗАПУСК ОБУЧЕНИЯ ===\n",
            "Epoch 1/50\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/keras/src/layers/core/dense.py:93: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 87ms/step - accuracy: 0.5721 - loss: 0.6823 - val_accuracy: 0.5556 - val_loss: 0.6973\n",
            "Epoch 2/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.6357 - loss: 0.6813 - val_accuracy: 0.4444 - val_loss: 0.6950\n",
            "Epoch 3/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.6629 - loss: 0.6985 - val_accuracy: 0.4444 - val_loss: 0.6932\n",
            "Epoch 4/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.6302 - loss: 0.6928 - val_accuracy: 0.4444 - val_loss: 0.6918\n",
            "Epoch 5/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7045 - loss: 0.6854 - val_accuracy: 0.4444 - val_loss: 0.6906\n",
            "Epoch 6/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.8289 - loss: 0.6398 - val_accuracy: 0.4444 - val_loss: 0.6893\n",
            "Epoch 7/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.6907 - loss: 0.6587 - val_accuracy: 0.4444 - val_loss: 0.6881\n",
            "Epoch 8/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.6889 - loss: 0.6737 - val_accuracy: 0.4444 - val_loss: 0.6866\n",
            "Epoch 9/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.6594 - loss: 0.6850 - val_accuracy: 0.4444 - val_loss: 0.6857\n",
            "Epoch 10/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.6337 - loss: 0.6602 - val_accuracy: 0.4444 - val_loss: 0.6848\n",
            "Epoch 11/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step - accuracy: 0.6802 - loss: 0.6547 - val_accuracy: 0.4444 - val_loss: 0.6837\n",
            "Epoch 12/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7734 - loss: 0.6240 - val_accuracy: 0.4444 - val_loss: 0.6818\n",
            "Epoch 13/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7150 - loss: 0.6451 - val_accuracy: 0.4444 - val_loss: 0.6801\n",
            "Epoch 14/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7375 - loss: 0.6391 - val_accuracy: 0.4444 - val_loss: 0.6782\n",
            "Epoch 15/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.6215 - loss: 0.6465 - val_accuracy: 0.4444 - val_loss: 0.6765\n",
            "Epoch 16/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.6979 - loss: 0.6556 - val_accuracy: 0.4444 - val_loss: 0.6750\n",
            "Epoch 17/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.6177 - loss: 0.6456 - val_accuracy: 0.4444 - val_loss: 0.6732\n",
            "Epoch 18/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.6018 - loss: 0.6739 - val_accuracy: 0.4444 - val_loss: 0.6720\n",
            "Epoch 19/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7236 - loss: 0.6438 - val_accuracy: 0.4444 - val_loss: 0.6709\n",
            "Epoch 20/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7445 - loss: 0.6241 - val_accuracy: 0.4444 - val_loss: 0.6701\n",
            "Epoch 21/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.7213 - loss: 0.6387 - val_accuracy: 0.5556 - val_loss: 0.6693\n",
            "Epoch 22/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.6944 - loss: 0.6524 - val_accuracy: 0.5556 - val_loss: 0.6688\n",
            "Epoch 23/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.6921 - loss: 0.6269 - val_accuracy: 0.5556 - val_loss: 0.6683\n",
            "Epoch 24/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.8147 - loss: 0.6373 - val_accuracy: 0.5556 - val_loss: 0.6676\n",
            "Epoch 25/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7459 - loss: 0.6112 - val_accuracy: 0.5556 - val_loss: 0.6670\n",
            "Epoch 26/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7199 - loss: 0.6042 - val_accuracy: 0.5556 - val_loss: 0.6675\n",
            "Epoch 27/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7407 - loss: 0.5814 - val_accuracy: 0.5556 - val_loss: 0.6681\n",
            "Epoch 28/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7442 - loss: 0.6302 - val_accuracy: 0.5556 - val_loss: 0.6683\n",
            "Epoch 29/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.6817 - loss: 0.6557 - val_accuracy: 0.5556 - val_loss: 0.6683\n",
            "Epoch 30/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.7633 - loss: 0.6006 - val_accuracy: 0.5556 - val_loss: 0.6680\n",
            "Epoch 31/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.6643 - loss: 0.6255 - val_accuracy: 0.5556 - val_loss: 0.6677\n",
            "Epoch 32/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7386 - loss: 0.6391 - val_accuracy: 0.5556 - val_loss: 0.6672\n",
            "Epoch 33/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7178 - loss: 0.6267 - val_accuracy: 0.5556 - val_loss: 0.6667\n",
            "Epoch 34/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7213 - loss: 0.6253 - val_accuracy: 0.5556 - val_loss: 0.6659\n",
            "Epoch 35/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7629 - loss: 0.6011 - val_accuracy: 0.5556 - val_loss: 0.6651\n",
            "Epoch 36/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7629 - loss: 0.5962 - val_accuracy: 0.5556 - val_loss: 0.6646\n",
            "Epoch 37/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7025 - loss: 0.6133 - val_accuracy: 0.5556 - val_loss: 0.6640\n",
            "Epoch 38/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7907 - loss: 0.6079 - val_accuracy: 0.5556 - val_loss: 0.6634\n",
            "Epoch 39/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.7525 - loss: 0.6102 - val_accuracy: 0.5556 - val_loss: 0.6629\n",
            "Epoch 40/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.7386 - loss: 0.6130 - val_accuracy: 0.5556 - val_loss: 0.6623\n",
            "Epoch 41/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7577 - loss: 0.5788 - val_accuracy: 0.5556 - val_loss: 0.6617\n",
            "Epoch 42/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.8445 - loss: 0.5435 - val_accuracy: 0.5556 - val_loss: 0.6610\n",
            "Epoch 43/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7525 - loss: 0.5840 - val_accuracy: 0.5556 - val_loss: 0.6603\n",
            "Epoch 44/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7699 - loss: 0.6089 - val_accuracy: 0.5556 - val_loss: 0.6597\n",
            "Epoch 45/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.8289 - loss: 0.5600 - val_accuracy: 0.5556 - val_loss: 0.6593\n",
            "Epoch 46/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.7959 - loss: 0.5513 - val_accuracy: 0.5556 - val_loss: 0.6589\n",
            "Epoch 47/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7595 - loss: 0.5917 - val_accuracy: 0.5556 - val_loss: 0.6588\n",
            "Epoch 48/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.6883 - loss: 0.6077 - val_accuracy: 0.5556 - val_loss: 0.6588\n",
            "Epoch 49/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7247 - loss: 0.6366 - val_accuracy: 0.5556 - val_loss: 0.6594\n",
            "Epoch 50/50\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.8185 - loss: 0.5760 - val_accuracy: 0.5556 - val_loss: 0.6598\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Выводы о гипотезе:**\n",
        "\n",
        "Гипотеза ЧАСТИЧНО подтверждается:\n",
        "\n",
        "Возраст влияет на беременность (train accuracy 81%)\n",
        "\n",
        "Но влияние не очень сильное (val accuracy 55.6%)\n",
        "\n",
        "Нужны дополнительные факторы для лучшего предсказания"
      ],
      "metadata": {
        "id": "J22StAt-I7ea"
      }
    }
  ]
}
